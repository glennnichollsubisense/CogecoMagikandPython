#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  Testing the assert support.
def_slotted_exemplar(:assert_test,
{},
{:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
assert_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_nan_fails()

#	 _self.assert_raised_condition( :assertion_failed_warning ,
#					_self , :assert_equals|()|,
#					{ 1.234, 0.0/0.0, _unset , 1.1 })
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_nan_equals_fails()

#	_self.assert_raised_condition( :assertion_failed_warning ,
#				       _self , :assert_equals|()|,
#				       { 0.0/0.0, 1.234, _unset  , 1.1 })
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_nan_equals_NaN_fails()

#	_self.assert_raised_condition( :assertion_failed_warning ,
#				       _self , :assert_equals|()|,
#				       { 0.0/0.0 , 0.0/0.0 , _unset , 1.1 } )
	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_pos_infinity_not_equals_neg_infinity()

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { float.infinity , float.minus_infinity , _unset , 4654 })
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_pos_infinity_not_equals()

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { float.infinity , 1.23 , _unset , 45678 })
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_pos_infinity_equals_infinity()

	_self.assert_equals( float.infinity , float.infinity , _unset , 23.5 )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_neg_infinity_equals_infinity()

	_self.assert_equals( float.minus_infinity , float.minus_infinity , _unset , 77.4 )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals()

	_self.assert_equals( assert_test , assert_test , "same object instance" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_differently()

	_self.assert( assert_test , :|=| ,  assert_test , "same object instance" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_not_equals()

	_self.assert( "2" , :|~=| , "3" , "not same numbers" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_unset()

	_self.assert_equals( _unset , _unset , "unset equal test" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_unset_not_equals_not_unset()

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { _unset , assert_test })
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_identity()

	_self.assert( object, :is  , object , "object exemplar identity" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_not_identity()

	_self.assert( "abc" , :isnt , "abc" , "string isnt string" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_identity_fails()

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()|,
				       { "abc" , :is , "abc" , "string is string" }) 
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_fail()

	a_message << "test fail() method"
	
	flag? << _false 
	
	_try _self.fail()
	_when assertion_failed_warning
	      flag? << _true 
	_endtry 

	_if _not flag?
	_then 
		condition.raise( :assertion_failed_warning , a_message ) # can't call fail here
	_endif

	_self.assert( flag? , :|=| , _true , a_message )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_error()

	_self.assert_raised_condition( :does_not_understand , 25 , :abcd , {} , "25.abcd fails" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_fail_assert_not_unset()
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()| , 
				       { _unset , :isnt , _unset } )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_succeed_access_not_unset()
	
	_self.assert( object , :isnt , _unset )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_false()
	
	_self.assert( _false , :is , _false )
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				      _self , :assert|()| ,
				      { _true , :is , _false } )
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()| ,
				       { 25 , :is , _false } )
	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_less()
	
	_self.assert( 12  , :|<| , 23 , "compare numbers" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_less_fails()
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()| ,
				       { 12  , :|<| , 12 , "compare numbers" } )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_greater()
	
	_self.assert( %c , :|>| , %a , "compare chars" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_greater_fails()
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()| ,
				       { "cb"  , :|>| , "cc" , "compare strings" } )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_greater_or_equals()
	
	_self.assert( %c , :|>=| , %c , "compare chars" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_less_or_equals_fails()

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert|()| ,
				       { 35  , :|<=| , 34 , "compare numbers" })
	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_same_kind()

	_self.assert( 23 , :is_kind_of?|()| , simple_number_mixin , "23 is number?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_same_class()

	_self.assert( 23 , :is_class_of?|()| , integer , "23 is integer?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_inherits_from()

	_self.assert( 23 , :inherits_from?|()| , number_mixin )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_responds_to()

	_self.assert( 23.34 , :responds_to?|()| , :abs , "responds to message" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_includes()

	_self.assert( { 2 , 3 , 5 } , :includes?|()| , 2 ,"{2,3,5} incl?. 2")
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_abs_delta()
	## 
	
	_self.assert_equals( 1 , 2 , _unset , 2 )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_rel_delta()
	## 

	_self.assert_equals( 3 , 2.8 , _unset , 0.3 , _true )
	_self.assert_equals( 3 , 3.8 , _unset , 0.3 , _true )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_abs_delta_fails()
	## 

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { 1 , 3 , _unset , 1 } )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method assert_test.test_assert_equals_rel_delta_fails()
	## 

	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { 3 , 2 , _unset , 0.3 , _true })
	
	_self.assert_raised_condition( :assertion_failed_warning ,
				       _self , :assert_equals|()|,
				       { 3 , 4 , _unset , 0.3 , _true })
_endmethod
$
